# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - CONTRIBUTING.md


pool:
  vmImage: 'vs2017-win2016'

variables:
  BuildConfiguration: 'Release'
  DotNetCoreVersion: '2.2.106'
  BuildPlatform: 'Any CPU'
  major: 1
  minor: 0
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named buildNo.
  buildNo: $[counter('geomversioncounter', 100)]
  version: '$(major).$(minor).$(buildNo)'
  PreReleaseVersion: '1.0.0-beta-2'
  DoPreRelease: false

steps:
  - script: echo Build.Reason:$(Build.Reason) version:$(version) DoPreRelease:$(DoPreRelease)
    displayName: 'BuildNumber'
  
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core $(DotNetCoreVersion)
    inputs:
      version: $(DotNetCoreVersion)
  - script: dotnet restore ./src/GraphQL-AspNetCore-2.2.sln
    displayName: dotnet restore
    
  - script: dotnet build --configuration $(buildConfiguration) /p:AssemblyVersion=$(version) ./src/GraphQL-AspNetCore-2.2.sln
    displayName: 'dotnet build $(buildConfiguration)'
  
  # do this after your tests have run
  
  - script: dotnet test ./src/XUnitServer_App_Identity/XUnitServer_App_Identity.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_App_Identity
  
  - script: dotnet test ./src/XUnitServer_OAuth2/XUnitServer_OAuth2.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_OAuth2

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: pack
      packagesToPack: '**/*.sln'
      versioningScheme: byPrereleaseNumber
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))

  - task: DotNetCoreCLI@2
    displayName: 'Pack Manual'
    inputs:
      command: pack
      packagesToPack: '**/*.sln'
      versioningScheme: byEnvVar
      versionEnvVar: PreReleaseVersion
      condition: and(succeeded(), eq(variables['DoPreRelease'], 'true'))
  
  #- task: DotNetCoreCLI@2
  #  displayName: Push
  #  inputs:
  #    command: push
  #    publishVstsFeed: '71e2807a-04c6-4cfa-80f3-69644ad1d3e0'

  #Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
  - task: DotNetCoreCLI@2
    displayName: 'Publish Website'
    inputs:
      command: publish
      publishWebProjects: true
      arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish --no-restore --no-build'

    
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
