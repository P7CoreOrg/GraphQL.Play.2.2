# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pr:
- '*'

 

pool:
  vmImage: 'vs2017-win2016'

variables:
  buildConfiguration: 'Release'
  DotNetCoreVersion: '2.2.203'


steps:
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core $(DotNetCoreVersion)
    inputs:
      version: $(DotNetCoreVersion)
  - script: dotnet restore ./src/GraphQL-AspNetCore-2.2.sln
    displayName: dotnet restore
    
# Version .NET Core Assemblies
# Description - Applies a version to a .NET Core assembly via the .csproj files based on the build number. Based on Microsoft sample from https://msdn.microsoft.com/Library/vs/alm/Build/overview
  - task: VersionDotNetCoreAssemblies@0
    inputs: 
      # Required arguments
       Path: $(Build.SourcesDirectory)
       VersionNumber: $(Build.BuildNumber)
       Injectversion: False
       VersionRegex: \d+\.\d+\.\d+\.\d+
       FilenamePattern: .csproj
       OutputVersion: OutputedVersion

  - script: dotnet build --configuration $(buildConfiguration) ./src/GraphQL-AspNetCore-2.2.sln
    displayName: 'dotnet build $(buildConfiguration)'
  
  # do this after your tests have run
  - script: dotnet test ./src/XUnitServer_App_Identity/XUnitServer_App_Identity.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_App_Identity
   
  - script: dotnet test ./src/XUnitServer_OAuth2/XUnitServer_OAuth2.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_OAuth2
    
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
    
 
