# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - CONTRIBUTING.md

 

pool:
  vmImage: 'vs2017-win2016'

variables:
  BuildConfiguration: 'Release'
  DotNetCoreVersion: '2.2.203'
  BuildPlatform: 'Any CPU'
  major: 1
  minor: 0
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named buildNo.
  buildNo: $[counter('geomversioncounter', 100)]
  version: '$(Build.BuildNumber)'
  
name: GraphQLPlay_$(SourceBranchName)_$(major).$(minor).$(buildNo)

steps:

  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core $(DotNetCoreVersion)
    inputs:
      version: $(DotNetCoreVersion)
  - script: dotnet restore ./src/GraphQL-AspNetCore-2.2.sln
    displayName: dotnet restore
    
# Version .NET Core project files
# Description - Applies a version to a .NET Core assembly via the .csproj files based on the build number. 
# Based on https://github.com/rfennell/AzurePipelines/wiki/Version-Assemblies-and-Packages-Tasks-YAML#versiondotnetcoreassembliestask
  - task: VersionDotNetCoreAssemblies@2
    displayName: 'Update netcore FileVersions'
    inputs: 
      # Required arguments
      Path: $(Build.SourcesDirectory)
      VersionNumber: $(version)
      VersionRegex: \d+\.\d+\.\d+\.\d+
      FilenamePattern: .csproj
      Field: fileversion
      OutputVersion: OutputedVersion

  - script: dotnet build --configuration $(buildConfiguration) ./src/GraphQL-AspNetCore-2.2.sln
    displayName: 'dotnet build $(buildConfiguration)'
  
  # do this after your tests have run
  - script: dotnet test ./src/XUnitServer_App_Identity/XUnitServer_App_Identity.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_App_Identity
   
  - script: dotnet test ./src/XUnitServer_OAuth2/XUnitServer_OAuth2.csproj --logger trx --collect "Code coverage"
    displayName: dotnet test XUnitServer_OAuth2
    
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
    
 
